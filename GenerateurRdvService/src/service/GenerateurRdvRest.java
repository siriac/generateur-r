package service;

import java.awt.image.BufferedImage;
import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.net.URLDecoder;
import java.text.SimpleDateFormat;
import java.util.Base64;
import java.util.Date;
import java.util.List;

import javax.ejb.EJB;
import javax.ejb.Stateless;
import javax.imageio.ImageIO;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;
import javax.ws.rs.Consumes;
import javax.ws.rs.FormParam;
import javax.ws.rs.GET;
import javax.ws.rs.POST;
import javax.ws.rs.Path;
import javax.ws.rs.PathParam;
import javax.ws.rs.Produces;
import javax.ws.rs.core.Application;
import javax.ws.rs.core.Context;
import javax.ws.rs.core.MediaType;
import javax.ws.rs.core.Response;

import org.joda.time.DateTime;
import org.springframework.web.bind.annotation.CrossOrigin;

import dao.IrdvLocalDao;
import metier.entities.CertiJaugeauge;
import metier.entities.CertificateJaugeage;
import metier.entities.CertificateNonScdp;
import metier.entities.Rdv;
import metier.entities.User;
import sun.misc.BASE64Decoder;
@Stateless
@Path("/")
@CrossOrigin(origins = "*")
public class GenerateurRdvRest {
	@EJB
	private IrdvLocalDao metier;
	
	
	
	
	@GET
	@Path("/listesRdvsByImmatr/{numImmat}")
	@Produces(MediaType.APPLICATION_JSON)
	public List<Rdv> Obtenir_RdvByNumImmm(@PathParam(value="numImmat")String numImmatr) {
		return metier.Obtenir_RdvByNumImmm(numImmatr);
	}
	/*@POST
    @Path("/EnregistrerRdv")
	public boolean Creer_Rdv(Rdv rdv) {
		return metier.Creer_Rdv(rdv);
	}*/
	@GET
	@Path("/listesRdvs")
	@Produces(MediaType.APPLICATION_JSON)
	public List<Rdv> List_Rdv() {
		return metier.List_Rdv();
	}
	@GET
	@Path("/listesRdvsByDate/{date}")
	@Produces(MediaType.APPLICATION_JSON)
	public List<Rdv> list_RdvByDate(@PathParam(value="date")String date) {
		
		return metier.list_RdvByDate(new DateTime(date).toDate());
	}
	@GET
	@Path("/ObtenirRdv/{id}")
	@Produces(MediaType.APPLICATION_JSON)
	public Rdv Obtenir_Rdv(@PathParam(value="id")long idrdv) {
		return metier.Obtenir_Rdv(idrdv);
	}
	@POST
    @Path("/EnregistrerRdv/{nom_cli}/{num_citerne}/{num_immatri}/{type_rdv}/{Nom_Constructeur}"
    		+ "/{Num_abrobation}/{Capa_nominal}/{Nbre_compartiment}/{num_tele}/{photoProfil}/{photoFace}")
	@Produces(MediaType.APPLICATION_JSON)
	public Rdv Creer_Rdvv(
			@PathParam("nom_cli")String nom_cli, 
			@PathParam("num_citerne")Long num_citern,  
			@PathParam("num_immatri")String num_immatri,
			@PathParam("type_rdv")String type_rdv,
			@PathParam("Nom_Constructeur")String Nom_Constructeur,
			@PathParam("Num_abrobation")String Num_abrobation,
			@PathParam("Capa_nominal")int Capa_nominal,
			@PathParam("Nbre_compartiment")int Nbre_compartiment,
			@PathParam("num_tele")String num_tele,
			@PathParam("photoProfil")String photoProfil,
			@PathParam("photoFace")String photoFace)
	{
		Date dateRdv=metier.Getdaterdv();
		Date datenextrdv=metier.Getnextdate(dateRdv);
		Date datesms=metier.Getdatesms(datenextrdv);
		String heureRdv=null;
		String Face,Profil,Arriere;
		byte[] imageFaceBytes,imageProfilBytes;
		try {
			System.out.println(photoFace);
			//Face=URLDecoder.decode(photoFace, "UTF-8");
			//System.out.println(Face);
			imageFaceBytes =Base64.getEncoder().encode(photoFace.getBytes());

			Profil=URLDecoder.decode(photoProfil, "UTF-8");
			imageProfilBytes = Base64.getEncoder().encode(photoProfil.getBytes());
			//System.out.println(param);
			// System.out.println(imageBytes.length+" "+imageBytes.toString());
				
				//CertificateNonScdp certscdp=new CertificateNonScdp(num_Immatr, nom_Photo, imageBytes);

				//metier.UploadCertificat(certscdp);
				Rdv rdvv= new Rdv(dateRdv, heureRdv, nom_cli, num_tele, num_immatri, num_citern, datesms,datenextrdv, type_rdv,Nom_Constructeur, Num_abrobation, Capa_nominal, Nbre_compartiment,imageProfilBytes,imageFaceBytes);

				System.out.println(nom_cli);
				metier.Creer_Rdv(rdvv);
				String result = "rdv cree : " + num_citern;
				return rdvv;
				
		} catch (UnsupportedEncodingException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	    
		/*Rdv rdvv=new Rdv(dateRdv, datenextrdv,heureRdv,nom_cli,num_tele,num_immatri, num_citern,datesms,type_rdv,Nom_Constructeur,Num_abrobation,Capa_nominal,Nbre_compartiment,
				photoProfil,photoArriere,photoFace);*/
		return null;
		
		
		
	}
	@GET
	@Path("/DateOfLastRdv")
	public String GetlastDaterdv2() {

        return metier.GetlastDaterdv2();
	}
	@GET
	@Path("/Authentification/{username}/{password}")
	@Produces(MediaType.APPLICATION_JSON)
	public User AuthentificationUser(@PathParam(value="username")String username, 
			                                 @PathParam(value="password")String password, @Context HttpServletRequest request) {
		User user=metier.SearchUserByNameandpassword(username, password);
		System.out.println(user);
		if(user!=null)
		{
			HttpSession session = request.getSession();
			session.setAttribute("user", user);
			return user;
		}
		
		return null;
	}
	@GET
	@Path("/Deconnexion")
	@Produces(MediaType.TEXT_HTML)
	public String deconnection(@Context HttpServletRequest request)
	{
		HttpSession session = request.getSession();
		session.invalidate();
        return("Login");
	}
	@GET
	@Path("/CertifcatByCodeBar/{codebar}")
	@Produces(MediaType.APPLICATION_JSON)
	public CertiJaugeauge SearchCertificate(@PathParam(value="codebar")String codebar) {
		System.out.println("Hello");
		String codeString=codebar.substring(10);
		Long codeLong=Long.parseLong(codeString);
		System.out.println(codeLong);
		CertiJaugeauge cj=metier.SearchCertificate(codeLong);
		if(cj!=null)
		{
			System.out.println(cj.getDateJaugeage());
			return cj;
		}else return null;
	}
	@GET
	@Path("/CertifcatByNumero/{numero}")
	@Produces(MediaType.APPLICATION_JSON)
	public CertiJaugeauge SearchCertificateByNumero(@PathParam(value="numero")Long numero) {
		System.out.println("Hello");
		CertiJaugeauge cj=metier.SearchCertificate(numero);
		if(cj!=null)
		{
			System.out.println(cj.getDateJaugeage());
			return cj;
		}else return null;
	}
	
	@GET
	@Path("/UploadCertificate/{num_Immatr}/{nom_photo}/{base64}")
	public void UploadCertificat(@PathParam("num_Immatr")String num_Immatr, 
			@PathParam("nom_photo")String nom_Photo,
			@PathParam("base64")String base64
			) {
		
	//	String photobase64="";
		
		System.out.println(nom_Photo+"  "+base64);
		String param;
		
		byte[] imageBytes;

		try {
			param=URLDecoder.decode(base64, "UTF-8");
			//imageBytes = param.getBytes();
			
			System.out.println(param);
			 //System.out.println(imageBytes.length+" "+imageBytes.toString());
			 imageBytes = Base64.getEncoder().encode(base64.getBytes());

				CertificateNonScdp certscdp=new CertificateNonScdp(num_Immatr, nom_Photo, imageBytes);

				metier.UploadCertificat(certscdp);
				
		} catch (UnsupportedEncodingException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	    
	   

	}

	@POST
    @Path("/EnregistrerRdvSuite/{idRdv}/{photoArriere}")
	@Produces(MediaType.APPLICATION_JSON)
	public Rdv Creer_Rdvv(
			@PathParam("idRdv")Long idRdv, 
			@PathParam("photoArriere")String photoArriere)
	{
		Rdv rdv=metier.Obtenir_Rdv(idRdv);
		
		String Arriere;
		byte[] imageArriereBytes;
		try {
			Arriere=URLDecoder.decode(photoArriere, "UTF-8");
			imageArriereBytes = Base64.getEncoder().encode(photoArriere.getBytes());;
			//System.out.println(param);
			// System.out.println(imageBytes.length+" "+imageBytes.toString());
				
				//CertificateNonScdp certscdp=new CertificateNonScdp(num_Immatr, nom_Photo, imageBytes);

				//metier.UploadCertificat(certscdp);
			rdv.setPhotoArriere(imageArriereBytes);
			metier.Modifier_Rdv(rdv);
				return rdv;
				
		} catch (UnsupportedEncodingException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	    
		/*Rdv rdvv=new Rdv(dateRdv, datenextrdv,heureRdv,nom_cli,num_tele,num_immatri, num_citern,datesms,type_rdv,Nom_Constructeur,Num_abrobation,Capa_nominal,Nbre_compartiment,
				photoProfil,photoArriere,photoFace);*/
		return null;
		
		
		
	}
	@GET
	@Path("/UploadCertificate/{num_Immatr}/{nom_photo}")
	public void UploadCertificat(@PathParam("num_Immatr")String num_Immatr, 
			@PathParam("nom_photo")String nom_Photo
			) {
		
	String photobase64="";
		byte[] name = Base64.getEncoder().encode(photobase64.getBytes());
		
		
				CertificateNonScdp certscdp=new CertificateNonScdp(num_Immatr, nom_Photo,name);

				metier.UploadCertificat(certscdp);
				
			
	    
	   

	}
}
